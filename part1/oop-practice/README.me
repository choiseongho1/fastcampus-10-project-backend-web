객체지향 프로그래밍 특징 4가지 
1. 추상화 (Abstraction) 
2. 다형성 (Polymorphism) 
3. 캡슐화 (Encapsulation) 
4. 상속 (Inheritance) 

객체지향 설계 원칙 5가지 (SOLID) 
1. SRP : Single Responsibility Principle (단일 책임의 원칙) 
2. OCP : Open/Closed Principle (개방 폐쇄의 원칙) 
3. LSP : Liskov’s Substitution Principle (리스코프 치환의 원칙) 
4. ISP : Interface Segregation Principle (인터페이스 분리의 원칙) 
5. DIP : Dependency Inversion Principle (의존성 역전의 원칙)

테스트 코드를 작성하는 이유? 
  1. 문서화 역할 
  2. 코드에 결함을 발견하기 위함 
  3. 리팩토링 시 안정성 확보 
  4. 테스트 하기 쉬운 코드를 작성하다 보면 더 낮은 결합도를 가진 설계를 얻을 수 있음 


TDD 
• Test Driven Development (테스트 주도 개발) 
• 프로덕션 코드보다 테스트 코드를 먼저 작성하는 개발 방법 
• 기능 동작을 검증 (메서드 단위)

BDD  
• Behavior Driven Development (행위 주도 개발)  
• 행위에 대한 테스트 코드를 작성하는 개발 방법 
• 유저 시나리오 동작을 검증 (시나리오 단위) 
• 하나의 시나리오는 Given, When, Then 구조를 가짐

