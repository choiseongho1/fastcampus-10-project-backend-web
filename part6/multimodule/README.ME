# Java Multi Module 프로젝트

이 프로젝트는 Java Multi Module 구조를 사용하여 개발된 실습 프로젝트입니다. 각 모듈은 독립적인 기능을 가지며, 특정 역할을 담당합니다.

## 목차

- [프로젝트 소개](#프로젝트-소개)
- [모듈 구조](#모듈-구조)
- [주요 어노테이션](#주요-어노테이션)
- [Multi Module의 장점](#multi-module의-장점)
- [프로젝트 구성](#프로젝트-구성)
- [주요 내용](#주요-내용)

## 프로젝트 소개

본 프로젝트는 Java를 사용한 비동기 프로그래밍과 Multi Module 구조에 대한 실습을 목적으로 합니다. 프로젝트는 `module-common`과 `module-api` 두 가지 주요 모듈로 구성됩니다.

## 모듈 구조

- **module-common**: 공통적으로 사용되는 클래스와 로직을 포함합니다. 예를 들어, 데이터 액세스 객체, 공통 도메인 객체 등이 이 모듈에 포함될 수 있습니다.
- **module-api**: 비즈니스 로직과 REST API 엔드포인트를 정의하는 모듈입니다. 클라이언트의 요청을 처리하고 응답을 반환합니다.

## 주요 어노테이션

- `@EntityScan` 어노테이션은 스프링 부트 애플리케이션에서 JPA 엔티티를 스캔하고 자동으로 검색하기 위한 위치를 지정합니다. 이 어노테이션은 주로 스프링 부트의 자동-구성 기능이 특정 패키지 외부에 위치한 엔티티를 찾지 못할 때 사용됩니다.
- `@EnableJpaRepositories` 어노테이션은 JPA 리포지토리 인터페이스를 스프링 데이터 JPA 리포지토리로 사용할 수 있도록 합니다. 이 어노테이션을 사용하면 스프링 데이터 JPA가 지정된 패키지를 스캔하여 리포지토리 인터페이스를 찾고, 이를 스프링 컨테이너에 빈으로 등록합니다.
- `@ExceptionHandler` 어노테이션을 사용할 가능성이 높습니다. 컨트롤러 어드바이스 클래스에서는 다양한 유형의 예외를 처리하고, 각 예외 유형에 대해 적절한 HTTP 상태 코드와 에러 메시지를 포함한 응답을 반환할 수 있습니다.

## Multi Module의 장점

- **재사용성**: 공통 모듈을 여러 프로젝트에서 재사용할 수 있습니다.
- **분리성**: 기능별로 코드를 분리하여 관리하므로 프로젝트의 유지보수가 용이해집니다.
- **독립적인 빌드 및 배포**: 각 모듈을 독립적으로 빌드 및 배포할 수 있어 전체 시스템의 유연성이 향상됩니다.

## 프로젝트 구성

프로젝트를 빌드하고 실행하는 방법에 대한 설명을 포함합니다. 필요한 경우 환경 설정, 필수 종속성 등에 대한 정보도 제공합니다.

## 주요 내용

###### 클래스 내 주요 내용   
- **@ExceptionHandler(CustomException.class)**: 이 어노테이션은 `CustomException` 타입의 예외가 발생할 때 해당 메서드가 처리하도록 지정합니다. 여기서 `handlerCustomException` 메서드는 `CustomException`을 매개변수로 받아 `CommonResponse` 객체를 반환합니다. 반환되는 `CommonResponse` 객체는 예외에 대한 정보(예: 에러 코드와 메시지)를 담고 있습니다.
    
- **@ExceptionHandler(Exception.class)**: 이 어노테이션은 처리되지 않은 모든 예외(`Exception` 클래스 타입)를 처리합니다. `handlerException` 메서드는 일반 `Exception`을 매개변수로 받아 처리하며, 알려지지 않은 에러 코드와 메시지를 담은 `CommonResponse` 객체를 반환합니다. 이는 예상치 못한 예외 상황을 처리하는 일반적인 방법입니다.
    

### 작동 방식

애플리케이션에서 `CustomException`이 발생하면 `handlerCustomException` 메서드가 호출되어 해당 예외에 대한 정보를 담은 `CommonResponse`를 반환합니다. 이는 클라이언트에게 보다 명확한 에러 정보를 제공합니다. 또한, 예상치 못한 `Exception`이 발생하면 `handlerException` 메서드가 호출되어 일반적인 에러 응답을 반환합니다.​
